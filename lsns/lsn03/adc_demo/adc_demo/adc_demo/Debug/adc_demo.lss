
adc_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a3  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000221  00000000  00000000  00000f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
  76:	8e c0       	rjmp	.+284    	; 0x194 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
/* Main program */

int main(void)
{
	/* Set up I/O PORTs */
	DDRB = DDRB | (1 << PB5);			// OR Mask - set PB5 on PORTB to output
  7a:	25 9a       	sbi	0x04, 5	; 4
	/* Declare local variables */
	unsigned char channel = 0;			// Connect analog signal to PORTF.0, Channel 0
	unsigned int adc_data;				// Variable for ADC results
		
	/* Initialize ADC */
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Enable the ADC with prescaler=128
  7c:	ea e7       	ldi	r30, 0x7A	; 122
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	80 83       	st	Z, r24

	/* Set ADC channel and reference */
	ADMUX |= (1 << REFS0) | channel;	// Set reference to AVCC and channel  
  84:	ac e7       	ldi	r26, 0x7C	; 124
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	8c 91       	ld	r24, X
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	8c 93       	st	X, r24
	
	/* Start the first conversion */
	ADCSRA |= (1 << ADSC);				// Set the bit to start the conversion	
  8e:	80 81       	ld	r24, Z
  90:	80 64       	ori	r24, 0x40	; 64
  92:	80 83       	st	Z, r24
		
	/* Loop */
	while(1)
	{
		while(ADCSRA & (1 <<ADSC));		// Waits for ADC conversion to complete
  94:	ca e7       	ldi	r28, 0x7A	; 122
  96:	d0 e0       	ldi	r29, 0x00	; 0

		adc_data = ADCW;				// Read all 10 bits into variable
  98:	08 e7       	ldi	r16, 0x78	; 120
  9a:	10 e0       	ldi	r17, 0x00	; 0
	ADCSRA |= (1 << ADSC);				// Set the bit to start the conversion	
		
	/* Loop */
	while(1)
	{
		while(ADCSRA & (1 <<ADSC));		// Waits for ADC conversion to complete
  9c:	88 81       	ld	r24, Y
  9e:	86 fd       	sbrc	r24, 6
  a0:	fd cf       	rjmp	.-6      	; 0x9c <main+0x22>

		adc_data = ADCW;				// Read all 10 bits into variable
  a2:	f8 01       	movw	r30, r16
  a4:	60 81       	ld	r22, Z
  a6:	71 81       	ldd	r23, Z+1	; 0x01

		if ( adc_data > (2.5*1023)/5 )
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e d0       	rcall	.+28     	; 0xca <__floatunsisf>
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 ec       	ldi	r19, 0xC0	; 192
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	53 e4       	ldi	r21, 0x43	; 67
  b6:	46 d0       	rcall	.+140    	; 0x144 <__gesf2>
  b8:	18 16       	cp	r1, r24
  ba:	14 f4       	brge	.+4      	; 0xc0 <main+0x46>
			PORTB = PORTB | (1 << PB5);	// OR mask to set only PB5 or Pin13 on Arduino - turn on LED
  bc:	2d 9a       	sbi	0x05, 5	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x48>
		else
			PORTB = PORTB & ~(1 << PB5); // AND mask to clear only PB5 - turn off LED
  c0:	2d 98       	cbi	0x05, 5	; 5

		ADCSRA |= (1 << ADSC);			// Set the bit to start conversion again
  c2:	88 81       	ld	r24, Y
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	88 83       	st	Y, r24
	}
  c8:	e9 cf       	rjmp	.-46     	; 0x9c <main+0x22>

000000ca <__floatunsisf>:
  ca:	e8 94       	clt
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <__floatsisf+0x12>

000000ce <__floatsisf>:
  ce:	97 fb       	bst	r25, 7
  d0:	3e f4       	brtc	.+14     	; 0xe0 <__floatsisf+0x12>
  d2:	90 95       	com	r25
  d4:	80 95       	com	r24
  d6:	70 95       	com	r23
  d8:	61 95       	neg	r22
  da:	7f 4f       	sbci	r23, 0xFF	; 255
  dc:	8f 4f       	sbci	r24, 0xFF	; 255
  de:	9f 4f       	sbci	r25, 0xFF	; 255
  e0:	99 23       	and	r25, r25
  e2:	a9 f0       	breq	.+42     	; 0x10e <__floatsisf+0x40>
  e4:	f9 2f       	mov	r31, r25
  e6:	96 e9       	ldi	r25, 0x96	; 150
  e8:	bb 27       	eor	r27, r27
  ea:	93 95       	inc	r25
  ec:	f6 95       	lsr	r31
  ee:	87 95       	ror	r24
  f0:	77 95       	ror	r23
  f2:	67 95       	ror	r22
  f4:	b7 95       	ror	r27
  f6:	f1 11       	cpse	r31, r1
  f8:	f8 cf       	rjmp	.-16     	; 0xea <__floatsisf+0x1c>
  fa:	fa f4       	brpl	.+62     	; 0x13a <__floatsisf+0x6c>
  fc:	bb 0f       	add	r27, r27
  fe:	11 f4       	brne	.+4      	; 0x104 <__floatsisf+0x36>
 100:	60 ff       	sbrs	r22, 0
 102:	1b c0       	rjmp	.+54     	; 0x13a <__floatsisf+0x6c>
 104:	6f 5f       	subi	r22, 0xFF	; 255
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	8f 4f       	sbci	r24, 0xFF	; 255
 10a:	9f 4f       	sbci	r25, 0xFF	; 255
 10c:	16 c0       	rjmp	.+44     	; 0x13a <__floatsisf+0x6c>
 10e:	88 23       	and	r24, r24
 110:	11 f0       	breq	.+4      	; 0x116 <__floatsisf+0x48>
 112:	96 e9       	ldi	r25, 0x96	; 150
 114:	11 c0       	rjmp	.+34     	; 0x138 <__floatsisf+0x6a>
 116:	77 23       	and	r23, r23
 118:	21 f0       	breq	.+8      	; 0x122 <__floatsisf+0x54>
 11a:	9e e8       	ldi	r25, 0x8E	; 142
 11c:	87 2f       	mov	r24, r23
 11e:	76 2f       	mov	r23, r22
 120:	05 c0       	rjmp	.+10     	; 0x12c <__floatsisf+0x5e>
 122:	66 23       	and	r22, r22
 124:	71 f0       	breq	.+28     	; 0x142 <__floatsisf+0x74>
 126:	96 e8       	ldi	r25, 0x86	; 134
 128:	86 2f       	mov	r24, r22
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	2a f0       	brmi	.+10     	; 0x13a <__floatsisf+0x6c>
 130:	9a 95       	dec	r25
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	88 1f       	adc	r24, r24
 138:	da f7       	brpl	.-10     	; 0x130 <__floatsisf+0x62>
 13a:	88 0f       	add	r24, r24
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	97 f9       	bld	r25, 7
 142:	08 95       	ret

00000144 <__gesf2>:
 144:	03 d0       	rcall	.+6      	; 0x14c <__fp_cmp>
 146:	08 f4       	brcc	.+2      	; 0x14a <__gesf2+0x6>
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	08 95       	ret

0000014c <__fp_cmp>:
 14c:	99 0f       	add	r25, r25
 14e:	00 08       	sbc	r0, r0
 150:	55 0f       	add	r21, r21
 152:	aa 0b       	sbc	r26, r26
 154:	e0 e8       	ldi	r30, 0x80	; 128
 156:	fe ef       	ldi	r31, 0xFE	; 254
 158:	16 16       	cp	r1, r22
 15a:	17 06       	cpc	r1, r23
 15c:	e8 07       	cpc	r30, r24
 15e:	f9 07       	cpc	r31, r25
 160:	c0 f0       	brcs	.+48     	; 0x192 <__fp_cmp+0x46>
 162:	12 16       	cp	r1, r18
 164:	13 06       	cpc	r1, r19
 166:	e4 07       	cpc	r30, r20
 168:	f5 07       	cpc	r31, r21
 16a:	98 f0       	brcs	.+38     	; 0x192 <__fp_cmp+0x46>
 16c:	62 1b       	sub	r22, r18
 16e:	73 0b       	sbc	r23, r19
 170:	84 0b       	sbc	r24, r20
 172:	95 0b       	sbc	r25, r21
 174:	39 f4       	brne	.+14     	; 0x184 <__fp_cmp+0x38>
 176:	0a 26       	eor	r0, r26
 178:	61 f0       	breq	.+24     	; 0x192 <__fp_cmp+0x46>
 17a:	23 2b       	or	r18, r19
 17c:	24 2b       	or	r18, r20
 17e:	25 2b       	or	r18, r21
 180:	21 f4       	brne	.+8      	; 0x18a <__fp_cmp+0x3e>
 182:	08 95       	ret
 184:	0a 26       	eor	r0, r26
 186:	09 f4       	brne	.+2      	; 0x18a <__fp_cmp+0x3e>
 188:	a1 40       	sbci	r26, 0x01	; 1
 18a:	a6 95       	lsr	r26
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	81 1d       	adc	r24, r1
 190:	81 1d       	adc	r24, r1
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
