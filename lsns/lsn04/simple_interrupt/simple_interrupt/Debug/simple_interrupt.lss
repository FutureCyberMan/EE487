
simple_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006da  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000652  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e0  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007250  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000865c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00008727  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002ad  00000000  00000000  0000873f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__vector_1>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	2b d0       	rcall	.+86     	; 0xdc <main>
  86:	75 c0       	rjmp	.+234    	; 0x172 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <__vector_1>:
/*******************************************************************/
/* Interrupt Service Routine for External Interrupt 0 */
/* Turn on/off the LED */

ISR(INT0_vect)
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	3f 93       	push	r19
  98:	4f 93       	push	r20
  9a:	5f 93       	push	r21
  9c:	6f 93       	push	r22
  9e:	7f 93       	push	r23
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	af 93       	push	r26
  a6:	bf 93       	push	r27
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	PORTB = PORTB ^ (1 << PB5);
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	89 27       	eor	r24, r25
  b2:	85 b9       	out	0x05, r24	; 5
	//UART_transmit('a');
	printf("a");
  b4:	81 e6       	ldi	r24, 0x61	; 97
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	1b d0       	rcall	.+54     	; 0xf0 <putchar>
}
  ba:	ff 91       	pop	r31
  bc:	ef 91       	pop	r30
  be:	bf 91       	pop	r27
  c0:	af 91       	pop	r26
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	7f 91       	pop	r23
  c8:	6f 91       	pop	r22
  ca:	5f 91       	pop	r21
  cc:	4f 91       	pop	r20
  ce:	3f 91       	pop	r19
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:
/*******************************************************************/

int main(void)
{

	DDRB = DDRB | (1 << PB5);			// OR Mask - set PB5 on PORTB to output
  dc:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB & ~(1 << PB5);		// AND mask to clear only PB5 - turn off LED
  de:	2d 98       	cbi	0x05, 5	; 5
	
	PORTD = PORTD | (1 << PD2);			// Pull up PD2 which is external INT0
  e0:	5a 9a       	sbi	0x0b, 2	; 11
		
	/* Enable INT0 external interrupt */
	// EICRA = ( 1<<ISC01 ) | ( 1<<ISC00 );	// Set interrupt trigger to a falling edge
	EICRA = 0x3;
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = ( 1<<INT0  );					// Set INT0 enable bit
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	8d bb       	out	0x1d, r24	; 29

	/* Enable global interrupts */
	sei();
  ec:	78 94       	sei
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x12>

000000f0 <putchar>:
  f0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <fputc>

000000fa <fputc>:
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	fb 01       	movw	r30, r22
 104:	23 81       	ldd	r18, Z+3	; 0x03
 106:	21 fd       	sbrc	r18, 1
 108:	03 c0       	rjmp	.+6      	; 0x110 <fputc+0x16>
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	2c c0       	rjmp	.+88     	; 0x168 <fputc+0x6e>
 110:	22 ff       	sbrs	r18, 2
 112:	16 c0       	rjmp	.+44     	; 0x140 <fputc+0x46>
 114:	46 81       	ldd	r20, Z+6	; 0x06
 116:	57 81       	ldd	r21, Z+7	; 0x07
 118:	24 81       	ldd	r18, Z+4	; 0x04
 11a:	35 81       	ldd	r19, Z+5	; 0x05
 11c:	42 17       	cp	r20, r18
 11e:	53 07       	cpc	r21, r19
 120:	44 f4       	brge	.+16     	; 0x132 <fputc+0x38>
 122:	a0 81       	ld	r26, Z
 124:	b1 81       	ldd	r27, Z+1	; 0x01
 126:	9d 01       	movw	r18, r26
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	31 83       	std	Z+1, r19	; 0x01
 12e:	20 83       	st	Z, r18
 130:	8c 93       	st	X, r24
 132:	26 81       	ldd	r18, Z+6	; 0x06
 134:	37 81       	ldd	r19, Z+7	; 0x07
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	37 83       	std	Z+7, r19	; 0x07
 13c:	26 83       	std	Z+6, r18	; 0x06
 13e:	14 c0       	rjmp	.+40     	; 0x168 <fputc+0x6e>
 140:	8b 01       	movw	r16, r22
 142:	ec 01       	movw	r28, r24
 144:	fb 01       	movw	r30, r22
 146:	00 84       	ldd	r0, Z+8	; 0x08
 148:	f1 85       	ldd	r31, Z+9	; 0x09
 14a:	e0 2d       	mov	r30, r0
 14c:	09 95       	icall
 14e:	89 2b       	or	r24, r25
 150:	e1 f6       	brne	.-72     	; 0x10a <fputc+0x10>
 152:	d8 01       	movw	r26, r16
 154:	16 96       	adiw	r26, 0x06	; 6
 156:	8d 91       	ld	r24, X+
 158:	9c 91       	ld	r25, X
 15a:	17 97       	sbiw	r26, 0x07	; 7
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	17 96       	adiw	r26, 0x07	; 7
 160:	9c 93       	st	X, r25
 162:	8e 93       	st	-X, r24
 164:	16 97       	sbiw	r26, 0x06	; 6
 166:	ce 01       	movw	r24, r28
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
